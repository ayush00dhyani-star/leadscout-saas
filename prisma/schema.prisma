// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  company       String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  keywords      Keyword[]
  subscription  Subscription?
  apiKeys       ApiKey[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Keyword {
  id         String   @id @default(cuid())
  userId     String
  text       String
  platforms  String[] // ["reddit", "twitter"]
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  leads Lead[]

  @@index([userId, isActive])
}

model Lead {
  id         String   @id @default(cuid())
  keywordId  String
  platform   String   // "reddit" or "twitter"
  content    String   @db.Text
  author     String
  postUrl    String
  leadScore  Int      // 1-10
  metadata   Json     // Additional platform-specific data
  processed  Boolean  @default(false)
  createdAt  DateTime @default(now())

  keyword Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@index([keywordId, leadScore])
  @@index([createdAt])
  @@index([processed])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  stripeCustomerId     String   @unique
  stripeSubscriptionId String   @unique
  planType             String   // "starter", "pro", "enterprise"
  status               String   // "active", "canceled", "past_due", etc.
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  platform  String   // "reddit", "twitter", "openai"
  keyName   String   // Display name for the key
  keyValue  String   // Encrypted API key
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@index([userId, isActive])
}